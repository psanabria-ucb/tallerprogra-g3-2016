package bo.edu.ucbcba.hotel.view;

import bo.edu.ucbcba.hotel.controller.RoomController;
import bo.edu.ucbcba.hotel.exceptions.ValidationException;
import bo.edu.ucbcba.hotel.model.Rooms;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.*;
import java.util.List;

/**
 * Created by Gabo on 29-May-16.
 */
public class EditRoomForm extends JDialog {

    private JPanel EditRoomPanel;
    private JPanel NewRoomForm;
    private JComboBox RoomType;
    private JComboBox RoomView;
    private JLabel telefonoLabel;
    private JLabel juegoDeLivingLabel;
    private JLabel miniBarLabel;
    private JLabel adornosLabel;
    private JCheckBox AdornoscheckBox;
    private JCheckBox MiniBarcheckBox;
    private JCheckBox LivingcheckBox;
    private JButton saveButton;
    private JButton exitButton;
    private JCheckBox TelfcheckBox;
    private JCheckBox KitchencheckBox;
    private JLabel accesorisoDeCocinaLabel;
    private JLabel escritorioLabel;
    private JCheckBox DeskcheckBox;
    private boolean availability = true;
    RoomController roomControllerl;
    private int roomNumber;

    EditRoomForm(JDialog parent, int n) {
        super(parent, "Edit room", true);
        setContentPane(EditRoomPanel);
        roomControllerl = new RoomController();
        setBounds(400, 150, 510, 250);
        setResizable(false);
        roomNumber = n;
        RoomType.addItem("Simple");
        RoomType.addItem("Double");
        RoomType.addItem("Presidential");
        RoomType.addItem("Deluxe");
        //RoomType.setSelectedIndex(2);
        RoomView.addItem("Beach");
        RoomView.addItem("City");
        RoomView.addItem("Gardens");
        RoomView.addItem("Fields");
        getRoomInfo(n);
        exitButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                dispose();
            }
        });
        saveButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                saveRoom(roomNumber);
            }
        });
    }

    private void saveRoom(int n) {
        try {
            roomControllerl.update(RoomType.getSelectedItem().toString(), RoomView.getSelectedItem().toString(),
                    availability, TelfcheckBox.isSelected(), LivingcheckBox.isSelected(), KitchencheckBox.isSelected(),
                    MiniBarcheckBox.isSelected(), DeskcheckBox.isSelected(), AdornoscheckBox.isSelected(), n);
        } catch (ValidationException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Format error", JOptionPane.ERROR_MESSAGE);
        }

        JOptionPane.showMessageDialog(this, "Room modificated successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
        dispose();
    }

    private void getRoomInfo(int n) {
        List<Rooms> roomsList = RoomController.getRoom(n);
        for (Rooms s : roomsList) {
            if (s.isPhone())
                TelfcheckBox.setSelected(true);
            if (s.isKitchenAccesories())
                KitchencheckBox.setSelected(true);
            if (s.isLiving())
                LivingcheckBox.setSelected(true);
            if (s.isDesk())
                DeskcheckBox.setSelected(true);
            if (s.isOrnaments())
                AdornoscheckBox.setSelected(true);
            if (s.isMinibar())
                MiniBarcheckBox.setSelected(true);
            if (s.getType().equals("Simple"))
                RoomType.setSelectedIndex(0);
            if (s.getType().equals("Double"))
                RoomType.setSelectedIndex(1);
            if (s.getType().equals("Presidential"))
                RoomType.setSelectedIndex(2);
            if (s.getType().equals("Deluxe"))
                RoomType.setSelectedIndex(3);
            if (s.getRoomView().equals("Beach"))
                RoomView.setSelectedIndex(0);
            if (s.getRoomView().equals("City"))
                RoomView.setSelectedIndex(1);
            if (s.getRoomView().equals("Gardens"))
                RoomView.setSelectedIndex(2);
            if (s.getRoomView().equals("Fields"))
                RoomView.setSelectedIndex(3);
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        EditRoomPanel = new JPanel();
        EditRoomPanel.setLayout(new GridLayoutManager(1, 2, new Insets(10, 10, 10, 10), -1, -1));
        NewRoomForm = new JPanel();
        NewRoomForm.setLayout(new GridLayoutManager(7, 5, new Insets(10, 10, 10, 10), -1, -1));
        EditRoomPanel.add(NewRoomForm, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Room Type");
        NewRoomForm.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Room View");
        NewRoomForm.add(label2, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Inventory:");
        NewRoomForm.add(label3, new GridConstraints(3, 0, 3, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        NewRoomForm.add(spacer1, new GridConstraints(1, 1, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        RoomType = new JComboBox();
        NewRoomForm.add(RoomType, new GridConstraints(0, 1, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        RoomView = new JComboBox();
        NewRoomForm.add(RoomView, new GridConstraints(2, 1, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        telefonoLabel = new JLabel();
        telefonoLabel.setText("Telephone");
        NewRoomForm.add(telefonoLabel, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(134, 16), null, 0, false));
        juegoDeLivingLabel = new JLabel();
        juegoDeLivingLabel.setText(" Living Room Set");
        NewRoomForm.add(juegoDeLivingLabel, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(134, 16), null, 0, false));
        miniBarLabel = new JLabel();
        miniBarLabel.setText("Mini Bar");
        NewRoomForm.add(miniBarLabel, new GridConstraints(4, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        adornosLabel = new JLabel();
        adornosLabel.setText("Decoration");
        NewRoomForm.add(adornosLabel, new GridConstraints(3, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        AdornoscheckBox = new JCheckBox();
        AdornoscheckBox.setText("");
        NewRoomForm.add(AdornoscheckBox, new GridConstraints(3, 4, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        MiniBarcheckBox = new JCheckBox();
        MiniBarcheckBox.setText("");
        NewRoomForm.add(MiniBarcheckBox, new GridConstraints(4, 4, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        LivingcheckBox = new JCheckBox();
        LivingcheckBox.setText("");
        NewRoomForm.add(LivingcheckBox, new GridConstraints(4, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        saveButton = new JButton();
        saveButton.setBackground(new Color(-15122149));
        saveButton.setForeground(new Color(-16777216));
        saveButton.setText("Save");
        NewRoomForm.add(saveButton, new GridConstraints(6, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        exitButton = new JButton();
        exitButton.setBackground(new Color(-12514541));
        exitButton.setForeground(new Color(-16777216));
        exitButton.setText("Exit");
        NewRoomForm.add(exitButton, new GridConstraints(6, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        TelfcheckBox = new JCheckBox();
        TelfcheckBox.setText("");
        NewRoomForm.add(TelfcheckBox, new GridConstraints(3, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        KitchencheckBox = new JCheckBox();
        KitchencheckBox.setText("");
        NewRoomForm.add(KitchencheckBox, new GridConstraints(5, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(89, 24), null, 0, false));
        accesorisoDeCocinaLabel = new JLabel();
        accesorisoDeCocinaLabel.setText("Kitchen Accessories");
        NewRoomForm.add(accesorisoDeCocinaLabel, new GridConstraints(5, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(107, 16), null, 0, false));
        escritorioLabel = new JLabel();
        escritorioLabel.setText("Desktop");
        NewRoomForm.add(escritorioLabel, new GridConstraints(5, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        DeskcheckBox = new JCheckBox();
        DeskcheckBox.setText("");
        NewRoomForm.add(DeskcheckBox, new GridConstraints(5, 4, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        EditRoomPanel.add(spacer2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return EditRoomPanel;
    }
}
