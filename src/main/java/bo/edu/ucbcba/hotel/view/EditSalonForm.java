package bo.edu.ucbcba.hotel.view;

import bo.edu.ucbcba.hotel.controller.SalonController;
import bo.edu.ucbcba.hotel.exceptions.ValidationException;
import bo.edu.ucbcba.hotel.model.Salons;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;

/**
 * Created by Gabo on 26-Jun-16.
 */
public class EditSalonForm extends JDialog {
    private JPanel EditSalonPanel;
    private JTextField SalonName;
    private JTextField SalonCapacity;
    private JButton exitButton;
    private JButton saveButton;
    private JCheckBox checkBox1;
    private int salonNumber;
    private boolean availability;
    SalonController salonController;

    EditSalonForm(JDialog parent, int n) {
        super(parent, "Edit salon", true);
        setContentPane(EditSalonPanel);
        salonController = new SalonController();
        setBounds(400, 150, 510, 250);
        salonNumber = n;
        getSalonInfo(n);
        exitButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                dispose();
            }
        });
        saveButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                saveSalon(salonNumber);
            }
        });
    }

    private void getSalonInfo(int n) {
        List<Salons> salonList = SalonController.getSalon(n);
        for (Salons s : salonList) {
            SalonName.setText(s.getName());
            SalonCapacity.setText(Integer.toString(s.getCapacity()));

            if (s.isAvailability())
                checkBox1.setSelected(true);
            else
                checkBox1.setSelected(false);


        }
    }

    private void saveSalon(int n) {
        if (SalonCapacity.getText().length() == 0 || SalonName.getText().length() == 0) {
            JOptionPane.showMessageDialog(this, "Fields can't be empty", "Format error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        if (SalonName.getText().matches("[0-9]+")) {
            JOptionPane.showMessageDialog(this, "Salon name can't be a number,please insert new name", "Format error", JOptionPane.INFORMATION_MESSAGE);
            SalonName.setText("");
            return;
        }
        if (SalonName.getText().length() > 20) {
            JOptionPane.showMessageDialog(this, "Salon name is to big,please insert new one", "Format error", JOptionPane.INFORMATION_MESSAGE);
            SalonName.setText("");
            return;
        }
        if (!SalonCapacity.getText().matches("[0-9]+")) {
            JOptionPane.showMessageDialog(this, "Salon capacity field can only be a number,please insert one number", "Format error", JOptionPane.INFORMATION_MESSAGE);
            SalonCapacity.setText("");
            return;
        }
        if (SalonCapacity.getText().length() > 6) {
            JOptionPane.showMessageDialog(this, "Salon capacity is to big,please insert new one (max capacity:99999)", "Format error", JOptionPane.INFORMATION_MESSAGE);
            SalonCapacity.setText("");
            return;
        }
        if (checkBox1.isSelected())
            availability = true;
        else
            availability = false;
        try {
            salonController.update(SalonName.getText(), Integer.parseInt(SalonCapacity.getText()), salonNumber, availability);
        } catch (ValidationException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Format error", JOptionPane.ERROR_MESSAGE);
        }
        JOptionPane.showMessageDialog(this, "Salon edited successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
        dispose();


    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        EditSalonPanel = new JPanel();
        EditSalonPanel.setLayout(new GridLayoutManager(4, 4, new Insets(10, 10, 10, 10), -1, -1));
        final JLabel label1 = new JLabel();
        label1.setText("Salon Capacity");
        EditSalonPanel.add(label1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        SalonCapacity = new JTextField();
        EditSalonPanel.add(SalonCapacity, new GridConstraints(1, 1, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        SalonName = new JTextField();
        EditSalonPanel.add(SalonName, new GridConstraints(0, 1, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Salon Name");
        EditSalonPanel.add(label2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        saveButton = new JButton();
        saveButton.setText("Save");
        EditSalonPanel.add(saveButton, new GridConstraints(3, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        exitButton = new JButton();
        exitButton.setText("Exit");
        EditSalonPanel.add(exitButton, new GridConstraints(3, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Salon Availability");
        EditSalonPanel.add(label3, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        checkBox1 = new JCheckBox();
        checkBox1.setText("");
        EditSalonPanel.add(checkBox1, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        EditSalonPanel.add(spacer1, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return EditSalonPanel;
    }
}
